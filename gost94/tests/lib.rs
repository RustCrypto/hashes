use digest::dev::{digest_test, one_million_a};
use digest::new_test;

new_test!(gost94_test_main, "test", gost94::Gost94Test, digest_test);
new_test!(
    gost94_cryptopro_main,
    "cryptopro",
    gost94::Gost94CryptoPro,
    digest_test
);

#[test]
fn gost94_test_1million_a() {
    let output = include_bytes!("data/test_one_million_a.bin");
    one_million_a::<gost94::Gost94Test>(output);
}

#[test]
fn gost94_cryptopro_1million_a() {
    let output = include_bytes!("data/cryptopro_one_million_a.bin");
    one_million_a::<gost94::Gost94CryptoPro>(output);
}

/// Test vectors from:
/// https://github.com/gost-engine/engine/blob/master/test/01-digest.t
#[test]
fn gost_engine_tests() {
    use digest::Digest;
    let mut h = gost94::Gost94CryptoPro::new();
    for _ in 0..128 {
        h.update(b"12345670")
    }
    let res = h.finalize_reset();
    assert_eq!(res.as_slice(), &[
        0xf7, 0xfc, 0x6d, 0x16, 0xa6, 0xa5, 0xc1, 0x2a, 
        0xc4, 0xf7, 0xd3, 0x20, 0xe0, 0xfd, 0x0d, 0x83,
        0x54, 0x90, 0x86, 0x99, 0x12, 0x5e, 0x09, 0x72,
        0x7a, 0x4e, 0xf9, 0x29, 0x12, 0x2b, 0x1c, 0xae,
    ]);

    for _ in 0..128 {
        h.update(b"\x00\x01\x02\x15\x84\x67\x45\x31")
    }
    let res = h.finalize_reset();
    assert_eq!(res.as_slice(), &[
        0x69, 0xf5, 0x29, 0xaa, 0x82, 0xd9, 0x34, 0x4a,
        0xb0, 0xfa, 0x55, 0x0c, 0xdf, 0x4a, 0x70, 0xec,
        0xfd, 0x92, 0xa3, 0x8b, 0x55, 0x20, 0xb1, 0x90,
        0x63, 0x29, 0x76, 0x3e, 0x09, 0x10, 0x51, 0x96,
    ]);

    let mut buf = Vec::new();
    for _ in 0..128 {
        buf.extend_from_slice(b"12345670");
    }
    h.update(&buf[0..539]);
    let res = h.finalize_reset();
    assert_eq!(res.as_slice(), &[
        0xbd, 0x5f, 0x1e, 0x4b, 0x53, 0x9c, 0x7b, 0x00,
        0xf0, 0x86, 0x6a, 0xfd, 0xbc, 0x8e, 0xd4, 0x52,
        0x50, 0x3a, 0x18, 0x43, 0x60, 0x61, 0x74, 0x7a,
        0x34, 0x3f, 0x43, 0xef, 0xe8, 0x88, 0xaa, 0xc9,
    ]);

    for _ in 0..4096 {
        for _ in 0..7 {
            h.update(b"121345678");
        }
        h.update(b"1234567\n");
    }
    h.update("12345\n");
    let res = h.finalize();
    assert_eq!(res.as_slice(), &[
        0xe5, 0xd3, 0xac, 0x4e, 0xa3, 0xf6, 0x78, 0x96,
        0xc5, 0x1f, 0xf9, 0x19, 0xce, 0xdb, 0x94, 0x05,
        0xad, 0x77, 0x1e, 0x39, 0xf0, 0xf2, 0xea, 0xb1,
        0x03, 0x62, 0x4f, 0x9a, 0x75, 0x8e, 0x50, 0x6f,
    ]);
}
