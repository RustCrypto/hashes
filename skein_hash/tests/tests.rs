extern crate skein_hash;

const TEST_MESSAGE : [u8;512] = [0xFF,0xFE,0xFD,0xFC,0xFB,0xFA,0xF9,0xF8,0xF7,0xF6,0xF5,0xF4,0xF3,
    0xF2,0xF1,0xF0,0xEF,0xEE,0xED,0xEC,0xEB,0xEA,0xE9,0xE8,0xE7,0xE6,0xE5,0xE4,0xE3,0xE2,0xE1,0xE0,
    0xDF,0xDE,0xDD,0xDC,0xDB,0xDA,0xD9,0xD8,0xD7,0xD6,0xD5,0xD4,0xD3,0xD2,0xD1,0xD0,0xCF,0xCE,0xCD,
    0xCC,0xCB,0xCA,0xC9,0xC8,0xC7,0xC6,0xC5,0xC4,0xC3,0xC2,0xC1,0xC0,0xBF,0xBE,0xBD,0xBC,0xBB,0xBA,
    0xB9,0xB8,0xB7,0xB6,0xB5,0xB4,0xB3,0xB2,0xB1,0xB0,0xAF,0xAE,0xAD,0xAC,0xAB,0xAA,0xA9,0xA8,0xA7,
    0xA6,0xA5,0xA4,0xA3,0xA2,0xA1,0xA0,0x9F,0x9E,0x9D,0x9C,0x9B,0x9A,0x99,0x98,0x97,0x96,0x95,0x94,
    0x93,0x92,0x91,0x90,0x8F,0x8E,0x8D,0x8C,0x8B,0x8A,0x89,0x88,0x87,0x86,0x85,0x84,0x83,0x82,0x81,
    0x80,0x7F,0x7E,0x7D,0x7C,0x7B,0x7A,0x79,0x78,0x77,0x76,0x75,0x74,0x73,0x72,0x71,0x70,0x6F,0x6E,
    0x6D,0x6C,0x6B,0x6A,0x69,0x68,0x67,0x66,0x65,0x64,0x63,0x62,0x61,0x60,0x5F,0x5E,0x5D,0x5C,0x5B,
    0x5A,0x59,0x58,0x57,0x56,0x55,0x54,0x53,0x52,0x51,0x50,0x4F,0x4E,0x4D,0x4C,0x4B,0x4A,0x49,0x48,
    0x47,0x46,0x45,0x44,0x43,0x42,0x41,0x40,0x3F,0x3E,0x3D,0x3C,0x3B,0x3A,0x39,0x38,0x37,0x36,0x35,
    0x34,0x33,0x32,0x31,0x30,0x2F,0x2E,0x2D,0x2C,0x2B,0x2A,0x29,0x28,0x27,0x26,0x25,0x24,0x23,0x22,
    0x21,0x20,0x1F,0x1E,0x1D,0x1C,0x1B,0x1A,0x19,0x18,0x17,0x16,0x15,0x14,0x13,0x12,0x11,0x10,0x0F,
    0x0E,0x0D,0x0C,0x0B,0x0A,0x09,0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00,
    0xFF,0xFE,0xFD,0xFC,0xFB,0xFA,0xF9,0xF8,0xF7,0xF6,0xF5,0xF4,0xF3,
    0xF2,0xF1,0xF0,0xEF,0xEE,0xED,0xEC,0xEB,0xEA,0xE9,0xE8,0xE7,0xE6,0xE5,0xE4,0xE3,0xE2,0xE1,0xE0,
    0xDF,0xDE,0xDD,0xDC,0xDB,0xDA,0xD9,0xD8,0xD7,0xD6,0xD5,0xD4,0xD3,0xD2,0xD1,0xD0,0xCF,0xCE,0xCD,
    0xCC,0xCB,0xCA,0xC9,0xC8,0xC7,0xC6,0xC5,0xC4,0xC3,0xC2,0xC1,0xC0,0xBF,0xBE,0xBD,0xBC,0xBB,0xBA,
    0xB9,0xB8,0xB7,0xB6,0xB5,0xB4,0xB3,0xB2,0xB1,0xB0,0xAF,0xAE,0xAD,0xAC,0xAB,0xAA,0xA9,0xA8,0xA7,
    0xA6,0xA5,0xA4,0xA3,0xA2,0xA1,0xA0,0x9F,0x9E,0x9D,0x9C,0x9B,0x9A,0x99,0x98,0x97,0x96,0x95,0x94,
    0x93,0x92,0x91,0x90,0x8F,0x8E,0x8D,0x8C,0x8B,0x8A,0x89,0x88,0x87,0x86,0x85,0x84,0x83,0x82,0x81,
    0x80,0x7F,0x7E,0x7D,0x7C,0x7B,0x7A,0x79,0x78,0x77,0x76,0x75,0x74,0x73,0x72,0x71,0x70,0x6F,0x6E,
    0x6D,0x6C,0x6B,0x6A,0x69,0x68,0x67,0x66,0x65,0x64,0x63,0x62,0x61,0x60,0x5F,0x5E,0x5D,0x5C,0x5B,
    0x5A,0x59,0x58,0x57,0x56,0x55,0x54,0x53,0x52,0x51,0x50,0x4F,0x4E,0x4D,0x4C,0x4B,0x4A,0x49,0x48,
    0x47,0x46,0x45,0x44,0x43,0x42,0x41,0x40,0x3F,0x3E,0x3D,0x3C,0x3B,0x3A,0x39,0x38,0x37,0x36,0x35,
    0x34,0x33,0x32,0x31,0x30,0x2F,0x2E,0x2D,0x2C,0x2B,0x2A,0x29,0x28,0x27,0x26,0x25,0x24,0x23,0x22,
    0x21,0x20,0x1F,0x1E,0x1D,0x1C,0x1B,0x1A,0x19,0x18,0x17,0x16,0x15,0x14,0x13,0x12,0x11,0x10,0x0F,
    0x0E,0x0D,0x0C,0x0B,0x0A,0x09,0x08,0x07,0x06,0x05,0x04,0x03,0x02,0x01,0x00];

const EXPECTED_RESULT_0256_0256_0008 : [u8;32] = [
    0x0B,0x98,0xDC,0xD1,0x98,0xEA,0x0E,0x50,0xA7,0xA2,0x44,0xC4,0x44,0xE2,0x5C,0x23,
    0xDA,0x30,0xC1,0x0F,0xC9,0xA1,0xF2,0x70,0xA6,0x63,0x7F,0x1F,0x34,0xE6,0x7E,0xD2];

const EXPECTED_RESULT_0256_0256_0256 : [u8;32] = [
    0x8D,0x0F,0xA4,0xEF,0x77,0x7F,0xD7,0x59,0xDF,0xD4,0x04,0x4E,0x6F,0x6A,0x5A,0xC3,
    0xC7,0x74,0xAE,0xC9,0x43,0xDC,0xFC,0x07,0x92,0x7B,0x72,0x3B,0x5D,0xBF,0x40,0x8B];

const EXPECTED_RESULT_0256_0256_0512 : [u8;32] = [
    0xDF,0x28,0xE9,0x16,0x63,0x0D,0x0B,0x44,0xC4,0xA8,0x49,0xDC,0x9A,0x02,0xF0,0x7A,
    0x07,0xCB,0x30,0xF7,0x32,0x31,0x82,0x56,0xB1,0x5D,0x86,0x5A,0xC4,0xAE,0x16,0x2F];

const EXPECTED_RESULT_0256_0256_1024 : [u8;32] = [
    0x18,0x0D,0xE1,0x06,0xA7,0x04,0x01,0xBA,0x38,0xF2,0x59,0x7C,0x25,0xCB,0xEF,0xC7,
    0x36,0xDF,0xD8,0x8D,0x90,0xF2,0xD3,0x35,0x2E,0x0E,0xB2,0x55,0xAF,0xB6,0xDB,0x63];

const EXPECTED_RESULT_0256_0256_1032 : [u8;32] = [
    0xFA,0x35,0x8A,0x88,0x55,0x45,0xFF,0x07,0x16,0xCF,0x44,0x13,0xA8,0x57,0xD5,0xB2,
    0x17,0x0F,0x24,0xC0,0x3F,0x00,0x8D,0x8F,0x74,0x14,0x59,0x95,0xF0,0x6B,0xEC,0xCB];

const EXPECTED_RESULT_0512_0512_0008 : [u8;64] = [
    0x71,0xB7,0xBC,0xE6,0xFE,0x64,0x52,0x22,0x7B,0x9C,0xED,0x60,0x14,0x24,0x9E,0x5B,
    0xF9,0xA9,0x75,0x4C,0x3A,0xD6,0x18,0xCC,0xC4,0xE0,0xAA,0xE1,0x6B,0x31,0x6C,0xC8,
    0xCA,0x69,0x8D,0x86,0x43,0x07,0xED,0x3E,0x80,0xB6,0xEF,0x15,0x70,0x81,0x2A,0xC5,
    0x27,0x2D,0xC4,0x09,0xB5,0xA0,0x12,0xDF,0x2A,0x57,0x91,0x02,0xF3,0x40,0x61,0x7A];

const EXPECTED_RESULT_0512_0512_0512 : [u8;64] = [
    0x45,0x86,0x3B,0xA3,0xBE,0x0C,0x4D,0xFC,0x27,0xE7,0x5D,0x35,0x84,0x96,0xF4,0xAC,
    0x9A,0x73,0x6A,0x50,0x5D,0x93,0x13,0xB4,0x2B,0x2F,0x5E,0xAD,0xA7,0x9F,0xC1,0x7F,
    0x63,0x86,0x1E,0x94,0x7A,0xFB,0x1D,0x05,0x6A,0xA1,0x99,0x57,0x5A,0xD3,0xF8,0xC9,
    0xA3,0xCC,0x17,0x80,0xB5,0xE5,0xFA,0x4C,0xAE,0x05,0x0E,0x98,0x98,0x76,0x62,0x5B];

const EXPECTED_RESULT_0512_0512_1024 : [u8;64] = [
    0x91,0xCC,0xA5,0x10,0xC2,0x63,0xC4,0xDD,0xD0,0x10,0x53,0x0A,0x33,0x07,0x33,0x09,
    0x62,0x86,0x31,0xF3,0x08,0x74,0x7E,0x1B,0xCB,0xAA,0x90,0xE4,0x51,0xCA,0xB9,0x2E,
    0x51,0x88,0x08,0x7A,0xF4,0x18,0x87,0x73,0xA3,0x32,0x30,0x3E,0x66,0x67,0xA7,0xA2,
    0x10,0x85,0x6F,0x74,0x21,0x39,0x00,0x00,0x71,0xF4,0x8E,0x8B,0xA2,0xA5,0xAD,0xB7];

const EXPECTED_RESULT_0512_0512_1536 : [u8;64] = [
    0x0D,0x2D,0x9D,0xAA,0xDF,0x37,0x05,0x45,0xD0,0x30,0x0C,0x52,0x40,0x56,0x81,0xD8,
    0x06,0x41,0x24,0xD5,0x55,0xA7,0x27,0xC3,0x2D,0x94,0xDE,0x47,0x28,0x63,0x28,0xC1,
    0xC0,0x96,0xEA,0xEE,0x11,0x7D,0xF4,0x03,0x99,0x90,0xC2,0x47,0x73,0xC8,0xA8,0xB9,
    0x06,0x5F,0x02,0x6D,0x9B,0x93,0x1E,0x0C,0x25,0x46,0x68,0xDE,0x24,0xAA,0xD3,0x53];

const EXPECTED_RESULT_0512_0512_1552 : [u8;64] = [
    0x4B,0xB6,0x21,0xF6,0x26,0xFC,0x21,0x4F,0xA2,0xE9,0xFA,0x77,0x51,0xFC,0x0A,0xE4,
    0x8B,0xE6,0xD1,0x65,0x3A,0x4F,0x26,0x62,0x16,0x02,0x6D,0x64,0x18,0x81,0xFF,0x6F,
    0xA0,0xEB,0xDF,0x62,0x37,0x6C,0x75,0x7D,0x09,0xDD,0xCF,0x40,0x25,0x99,0x45,0xC1,
    0xAE,0xCE,0x22,0x9E,0xCC,0x7F,0x8E,0x93,0x43,0x37,0xBA,0xA8,0xD2,0x01,0x9B,0xF5];

const EXPECTED_RESULT_1024_1024_0008 : [u8;128] = [
    0xE6,0x2C,0x05,0x80,0x2E,0xA0,0x15,0x24,0x07,0xCD,0xD8,0x78,0x7F,0xDA,0x9E,0x35,
    0x70,0x3D,0xE8,0x62,0xA4,0xFB,0xC1,0x19,0xCF,0xF8,0x59,0x0A,0xFE,0x79,0x25,0x0B,
    0xCC,0xC8,0xB3,0xFA,0xF1,0xBD,0x24,0x22,0xAB,0x5C,0x0D,0x26,0x3F,0xB2,0xF8,0xAF,
    0xB3,0xF7,0x96,0xF0,0x48,0x00,0x03,0x81,0x53,0x1B,0x6F,0x00,0xD8,0x51,0x61,0xBC,
    0x0F,0xFF,0x4B,0xEF,0x24,0x86,0xB1,0xEB,0xCD,0x37,0x73,0xFA,0xBF,0x50,0xAD,0x4A,
    0xD5,0x63,0x9A,0xF9,0x04,0x0E,0x3F,0x29,0xC6,0xC9,0x31,0x30,0x1B,0xF7,0x98,0x32,
    0xE9,0xDA,0x09,0x85,0x7E,0x83,0x1E,0x82,0xEF,0x8B,0x46,0x91,0xC2,0x35,0x65,0x65,
    0x15,0xD4,0x37,0xD2,0xBD,0xA3,0x3B,0xCE,0xC0,0x01,0xC6,0x7F,0xFD,0xE1,0x5B,0xA8];

const EXPECTED_RESULT_1024_1024_1024 : [u8;128] = [
    0x1f,0x3e,0x02,0xc4,0x6f,0xb8,0x0a,0x3f,0xcd,0x2d,0xfb,0xbc,0x7c,0x17,0x38,0x00,
    0xb4,0x0c,0x60,0xc2,0x35,0x4a,0xf5,0x51,0x18,0x9e,0xbf,0x43,0x3c,0x3d,0x85,0xf9,
    0xff,0x18,0x03,0xe6,0xd9,0x20,0x49,0x31,0x79,0xed,0x7a,0xe7,0xfc,0xe6,0x9c,0x35,
    0x81,0xa5,0xa2,0xf8,0x2d,0x3e,0x0c,0x7a,0x29,0x55,0x74,0xd0,0xcd,0x7d,0x21,0x7c,
    0x48,0x4d,0x2f,0x63,0x13,0xd5,0x9a,0x77,0x18,0xea,0xd0,0x7d,0x07,0x29,0xc2,0x48,
    0x51,0xd7,0xe7,0xd2,0x49,0x1b,0x90,0x2d,0x48,0x91,0x94,0xe6,0xb7,0xd3,0x69,0xdb,
    0x0a,0xb7,0xaa,0x10,0x6f,0x0e,0xe0,0xa3,0x9a,0x42,0xef,0xc5,0x4f,0x18,0xd9,0x37,
    0x76,0x08,0x09,0x85,0xf9,0x07,0x57,0x4f,0x99,0x5e,0xc6,0xa3,0x71,0x53,0xa5,0x78];

const EXPECTED_RESULT_1024_1024_2048 : [u8;128] = [
    0x84,0x2A,0x53,0xC9,0x9C,0x12,0xB0,0xCF,0x80,0xCF,0x69,0x49,0x1B,0xE5,0xE2,0xF7,
    0x51,0x5D,0xE8,0x73,0x3B,0x6E,0xA9,0x42,0x2D,0xFD,0x67,0x66,0x65,0xB5,0xFA,0x42,
    0xFF,0xB3,0xA9,0xC4,0x8C,0x21,0x77,0x77,0x95,0x08,0x48,0xCE,0xCD,0xB4,0x8F,0x64,
    0x0F,0x81,0xFB,0x92,0xBE,0xF6,0xF8,0x8F,0x7A,0x85,0xC1,0xF7,0xCD,0x14,0x46,0xC9,
    0x16,0x1C,0x0A,0xFE,0x8F,0x25,0xAE,0x44,0x4F,0x40,0xD3,0x68,0x00,0x81,0xC3,0x5A,
    0xA4,0x3F,0x64,0x0F,0xD5,0xFA,0x3C,0x3C,0x03,0x0B,0xCC,0x06,0xAB,0xAC,0x01,0xD0,
    0x98,0xBC,0xC9,0x84,0xEB,0xD8,0x32,0x27,0x12,0x92,0x1E,0x00,0xB1,0xBA,0x07,0xD6,
    0xD0,0x1F,0x26,0x90,0x70,0x50,0x25,0x5E,0xF2,0xC8,0xE2,0x4F,0x71,0x6C,0x52,0xA5];

const EXPECTED_RESULT_1024_1024_3064 : [u8;128] = [
    0xEE,0x26,0x59,0x72,0x9D,0x37,0x75,0x17,0xC8,0xEE,0xF6,0x0D,0x87,0x73,0x7C,0xCE,
    0xBF,0xE9,0x12,0x42,0xD5,0x1C,0xD1,0xC8,0x0D,0x15,0xE6,0x0E,0x56,0xC6,0xDB,0x8E,
    0x87,0xF4,0xDF,0x38,0x4F,0xAE,0x95,0x36,0x84,0x80,0xEF,0xB5,0x55,0x1D,0x87,0xE7,
    0x21,0x69,0xCA,0xB9,0xFC,0x7C,0x2F,0x90,0x83,0xE1,0x87,0xD1,0x76,0x59,0x77,0xFE,
    0xC5,0x3B,0x24,0x43,0xDA,0xAF,0x98,0x0B,0x30,0x03,0xA6,0x79,0x2C,0x5E,0x86,0x84,
    0x72,0xE1,0xE5,0x13,0x6B,0x92,0x0A,0x41,0x2A,0xDE,0x5A,0xDB,0xA3,0x23,0xEA,0xB2,
    0x6D,0xA9,0x88,0x51,0x80,0xA8,0x19,0x42,0xB5,0x1B,0x13,0x33,0x37,0x38,0xE3,0x53,
    0xFA,0xC1,0xAA,0x4A,0xD2,0x8E,0x45,0xC0,0x02,0xF0,0x25,0x4B,0x7F,0xA2,0x94,0x5C];

const EXPECTED_RESULT_1024_1024_4096 : [u8;128] = [
    0x8D,0x7A,0x7C,0x7B,0x6E,0x1E,0x0F,0x72,0xB4,0x6E,0x1F,0x6A,0xEB,0x40,0x06,0xFA,
    0x72,0x50,0x8C,0x24,0xCD,0x45,0xAB,0x0E,0xD9,0x19,0x3B,0x59,0x7E,0xB5,0x66,0x27,
    0x2B,0xD3,0xB4,0x0F,0x1F,0x7E,0x68,0xAE,0xE8,0x9C,0x6F,0x32,0xD4,0x2F,0xEE,0x58,
    0x0A,0x49,0x37,0xF5,0x83,0xF5,0x44,0x7C,0x93,0x0C,0x9F,0x86,0x29,0x4C,0x9D,0x06,
    0x97,0x7B,0xD0,0x6E,0xDE,0x79,0x9D,0x97,0x73,0x28,0x92,0x6A,0x02,0x5B,0x87,0xB3,
    0x5F,0x26,0x49,0xE4,0xBB,0xB7,0x19,0xFD,0x46,0xB3,0xEF,0x56,0xB7,0x9A,0x0A,0x47,
    0x27,0xCC,0x93,0x0E,0x86,0x3C,0x75,0xEC,0x04,0x0C,0x17,0x53,0xBC,0x1E,0x11,0x89,
    0x87,0x10,0x52,0x1B,0xB0,0xD0,0x8D,0x28,0x97,0x65,0x08,0x19,0x50,0x38,0xEB,0x99];


fn print_hash(a : &u8, b : &u8 , bit_len : usize){
    println!("actually got:");
    let a_pointer : u64 = (a as *const u8) as u64;
    let b_pointer : u64 = (b as *const u8) as u64;

    unsafe{
        for i in 0..(bit_len/8)/16{
            for j in 0..16{
                print!("{:02x} ", *((a_pointer+(16*i+j) as u64)as *const u8));
            }
            println!();
        }

        println!("\nexpected:");
        for i in 0..(bit_len/8)/16{
            for j in 0..16{
                print!("{:02x} ", *((b_pointer+(16*i+j) as u64)as *const u8));
            }
            println!();
        }
    }
}


fn compare_hashes(a : &u8, b : &u8 , bit_len : usize)->bool{
    let byte_len : usize =  bit_len/8;
    let a_pointer : u64 = (a as *const u8) as u64;
    let b_pointer : u64 = (b as *const u8) as u64;

    unsafe{
        for i in 0..byte_len{
            if *((a_pointer+i as u64)as *const u8) != *((b_pointer+i as u64)as *const u8){
                print_hash(a,b,bit_len);
                return false;
            }
        }
    }
    return true;
}


#[test]
fn test_hash_0256_0256_0008(){
    let mut result_buffer : [u8;128] = [0;128];
    let test_result : bool;
    let bs : usize;
    let hs : usize;
    let ms : u64;

    bs = 256; hs = 256;

    ms=8;
    skein_hash::hash(bs, hs, &TEST_MESSAGE[0], ms, &mut result_buffer[0]);
    test_result = compare_hashes(&result_buffer[0], &EXPECTED_RESULT_0256_0256_0008[0],hs);
    assert_eq!(test_result,true);
}

#[test]
fn test_hash_0256_0256_0256(){
    let mut result_buffer : [u8;128] = [0;128];
    let test_result : bool;
    let bs : usize;
    let hs : usize;
    let ms : u64;

    bs = 256; hs = 256;
    ms=256;
    skein_hash::hash(bs, hs, &TEST_MESSAGE[0], ms, &mut result_buffer[0]);
    test_result = compare_hashes(&result_buffer[0], &EXPECTED_RESULT_0256_0256_0256[0],hs);
    assert_eq!(test_result,true);
}

#[test]
fn test_hash_0256_0256_0512(){
    let mut result_buffer : [u8;128] = [0;128];
    let test_result : bool;
    let bs : usize;
    let hs : usize;
    let ms : u64;

    bs = 256; hs = 256;
    ms=512;
    skein_hash::hash(bs, hs, &TEST_MESSAGE[0], ms, &mut result_buffer[0]);
    test_result = compare_hashes(&result_buffer[0], &EXPECTED_RESULT_0256_0256_0512[0],hs);
    assert_eq!(test_result,true);
}

#[test]
fn custom_test_hash_0256_0256_1024(){
    let mut result_buffer : [u8;128] = [0;128];
    let test_result : bool;
    let bs : usize;
    let hs : usize;
    let ms : u64;

    bs = 256; hs = 256;

    ms=1024;
    skein_hash::hash(bs, hs, &TEST_MESSAGE[0], ms, &mut result_buffer[0]);
    test_result = compare_hashes(&result_buffer[0], &EXPECTED_RESULT_0256_0256_1024[0],hs);
    assert_eq!(test_result,true);
}

#[test]
fn custom_test_hash_0256_0256_1032(){
    let mut result_buffer : [u8;128] = [0;128];
    let test_result : bool;
    let bs : usize;
    let hs : usize;
    let ms : u64;

    bs = 256; hs = 256;

    ms=1032;
    skein_hash::hash(bs, hs, &TEST_MESSAGE[0], ms, &mut result_buffer[0]);
    test_result = compare_hashes(&result_buffer[0], &EXPECTED_RESULT_0256_0256_1032[0],hs);
    assert_eq!(test_result,true);
}


#[test]
fn test_hash_0512_0512_0008(){
    let mut result_buffer : [u8;128] = [0;128];
    let test_result : bool;
    let bs : usize;
    let hs : usize;
    let ms : u64;

    bs = 512; hs = 512;

    ms=8;
    skein_hash::hash(bs, hs, &TEST_MESSAGE[0], ms, &mut result_buffer[0]);
    test_result = compare_hashes(&result_buffer[0], &EXPECTED_RESULT_0512_0512_0008[0],hs);
    assert_eq!(test_result,true);
}

#[test]
fn test_hash_0512_0512_0512(){
    let mut result_buffer : [u8;128] = [0;128];
    let test_result : bool;
    let bs : usize;
    let hs : usize;
    let ms : u64;

    bs = 512; hs = 512;

    ms=512;
    skein_hash::hash(bs, hs, &TEST_MESSAGE[0], ms, &mut result_buffer[0]);
    test_result = compare_hashes(&result_buffer[0], &EXPECTED_RESULT_0512_0512_0512[0],hs);
    assert_eq!(test_result,true);
}

#[test]
fn test_hash_0512_0512_1024(){
    let mut result_buffer : [u8;128] = [0;128];
    let test_result : bool;
    let bs : usize;
    let hs : usize;
    let ms : u64;

    bs = 512; hs = 512;

    ms=1024;
    skein_hash::hash(bs, hs, &TEST_MESSAGE[0], ms, &mut result_buffer[0]);
    test_result = compare_hashes(&result_buffer[0], &EXPECTED_RESULT_0512_0512_1024[0],hs);
    assert_eq!(test_result,true);
}

#[test]
fn custom_test_hash_0512_0512_1536(){
    let mut result_buffer : [u8;128] = [0;128];
    let test_result : bool;
    let bs : usize;
    let hs : usize;
    let ms : u64;

    bs = 512; hs = 512;

    ms=1536;
    skein_hash::hash(bs, hs, &TEST_MESSAGE[0], ms, &mut result_buffer[0]);
    test_result = compare_hashes(&result_buffer[0], &EXPECTED_RESULT_0512_0512_1536[0],hs);
    assert_eq!(test_result,true);
}

#[test]
fn custom_test_hash_0512_0512_1552(){
    let mut result_buffer : [u8;128] = [0;128];
    let test_result : bool;
    let bs : usize;
    let hs : usize;
    let ms : u64;

    bs = 512; hs = 512;

    ms=1552;
    skein_hash::hash(bs, hs, &TEST_MESSAGE[0], ms, &mut result_buffer[0]);
    test_result = compare_hashes(&result_buffer[0], &EXPECTED_RESULT_0512_0512_1552[0],hs);
    assert_eq!(test_result,true);
}

#[test]
fn test_hash_1024_1024_0008(){
    let mut result_buffer : [u8;128] = [0;128];
    let test_result : bool;
    let bs : usize;
    let hs : usize;
    let ms : u64;
    bs = 1024; hs = 1024;

    ms=8;
    skein_hash::hash(bs, hs, &TEST_MESSAGE[0], ms, &mut result_buffer[0]);
    test_result = compare_hashes(&result_buffer[0], &EXPECTED_RESULT_1024_1024_0008[0],hs);
    assert_eq!(test_result,true);
}

#[test]
fn test_hash_1024_1024_1024(){
    let mut result_buffer : [u8;128] = [0;128];
    let test_result : bool;
    let bs : usize;
    let hs : usize;
    let ms : u64;
    bs = 1024; hs = 1024;

    ms=1024;
    skein_hash::hash(bs, hs, &TEST_MESSAGE[0], ms, &mut result_buffer[0]);
    test_result = compare_hashes(&result_buffer[0], &EXPECTED_RESULT_1024_1024_1024[0],hs);
    assert_eq!(test_result,true);
}

#[test]
fn test_hash_1024_1024_2048(){
    let mut result_buffer : [u8;128] = [0;128];
    let test_result : bool;
    let bs : usize;
    let hs : usize;
    let ms : u64;
    bs = 1024; hs = 1024;

    ms=2048;
    skein_hash::hash(bs, hs, &TEST_MESSAGE[0], ms, &mut result_buffer[0]);
    test_result = compare_hashes(&result_buffer[0], &EXPECTED_RESULT_1024_1024_2048[0],hs);
    assert_eq!(test_result,true);
}


#[test]
fn custom_test_hash_1024_1024_3064(){
    let mut result_buffer : [u8;128] = [0;128];
    let test_result : bool;
    let bs : usize;
    let hs : usize;
    let ms : u64;
    bs = 1024; hs = 1024;

    ms=3064;
    skein_hash::hash(bs, hs, &TEST_MESSAGE[0], ms, &mut result_buffer[0]);
    test_result = compare_hashes(&result_buffer[0], &EXPECTED_RESULT_1024_1024_3064[0],hs);
    assert_eq!(test_result,true);
}

#[test]
fn custom_test_hash_1024_1024_4096(){
    let mut result_buffer : [u8;128] = [0;128];
    let test_result : bool;
    let bs : usize;
    let hs : usize;
    let ms : u64;
    bs = 1024; hs = 1024;

    ms=4096;
    skein_hash::hash(bs, hs, &TEST_MESSAGE[0], ms, &mut result_buffer[0]);
    test_result = compare_hashes(&result_buffer[0], &EXPECTED_RESULT_1024_1024_4096[0],hs);
    assert_eq!(test_result,true);
}
